/*
 * This source file was generated by the Gradle 'init' task
 */
package io.github.stellarsunset.semver;

import org.eclipse.jgit.api.Git;
import org.eclipse.jgit.revwalk.RevCommit;
import org.gradle.testkit.runner.BuildResult;
import org.gradle.testkit.runner.GradleRunner;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.io.TempDir;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.Writer;

import static org.junit.jupiter.api.Assertions.assertTrue;

class AutoSemverPluginFunctionalTest {

    @Test
    void testSetVersion(@TempDir File projectDir) {
        try (Git git = initializeProjectSafely(projectDir)) {
            BuildResult result = runGradle(projectDir, "showVersion");
            assertTrue(result.getOutput().contains("Project Version: 0.0.1"));
        }
    }

    @Test
    void testRelease(@TempDir File projectDir) {
        try (Git git = initializeProjectSafely(projectDir)) {
            BuildResult release = runGradle(projectDir, "release", "-Pminor");
            assertTrue(release.getOutput().contains("release 0.1.0"));

            BuildResult version = runGradle(projectDir, "showVersion");
            assertTrue(version.getOutput().contains("Project Version: 0.1.0"));
        }
    }

    private BuildResult runGradle(File projectDir, String... arguments) {
        GradleRunner runner = GradleRunner.create();
        runner.forwardOutput();
        runner.withPluginClasspath();
        runner.withArguments(arguments);
        runner.withProjectDir(projectDir);
        return runner.build();
    }

    private Git initializeProjectSafely(File projectDir) {
        try {
            return initializeProject(projectDir);
        } catch (Exception e) {
            return Assertions.fail(e);
        }
    }

    /**
     * Initialize a new gradle project + git repo in the provided directory.
     */
    private Git initializeProject(File projectDir) throws Exception {

        Git main = Git.init()
                .setGitDir(projectDir)
                .setInitialBranch("main")
                .call();

        File buildFile = new File(projectDir, "build.gradle");

        String content = """
                plugins {
                  id('io.github.stellarsunset.auto-semver')
                }
                
                tasks.register("showVersion") {
                    inputs.property("version", project.version)
                    doLast {
                        println("Project Version: ${inputs.properties["version"]}")
                    }
                }
                """;

        writeString(buildFile, content);

        File settingsFile = new File(projectDir, "settings.gradle");
        writeString(settingsFile, "");

        RevCommit commit = main.commit()
                .setAuthor("junit", "junit@autosemver.github.com")
                .setMessage("Initial Commit")
                .setAll(true)
                .call();

        return main;
    }

    private void writeString(File file, String string) throws IOException {
        try (Writer writer = new FileWriter(file)) {
            writer.write(string);
        }
    }
}
